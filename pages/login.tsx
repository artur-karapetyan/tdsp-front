import Head from "next/head";
import { useState } from "react";
import { Josefin_Sans } from "next/font/google";
import clsx from "clsx";
import { useRouter } from "next/router";
import axios from "axios";

const Josefin = Josefin_Sans({ subsets: ["latin"], variable: "--josefin" });

export default function Login() {
  const [formData, setFormData] = useState({ username: "", password: "" });
  const [error, setError] = useState({ username: "", password: "" });
  const [loginError, setLoginError] = useState<string | null>(null);
  const router = useRouter();

  interface LoginResponse {
    user_type: string;
    access_token: string;
  }

  const handleLogin = async (username: string, password: string) => {
    try {
      const response = await axios.post<LoginResponse>(
        "http://0.0.0.0:9090/login/",
        {
          username: username,
          password: password,
        }
      );

      if (response.data.user_type === "Admin" && response.status === 200) {
        document.cookie = `token=${response.data.access_token}`;
        router.push("/");
      } else {
        setLoginError("Invalid username or password.");
      }
    } catch (error) {
      setLoginError("There was a problem logging you in. Please try again.");
    }
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoginError(null);
    setError({ username: "", password: "" });

    if (!formData.username) {
      setError((prevError) => ({
        ...prevError,
        username: "Please enter your username.",
      }));
      return;
    }

    if (!formData.password) {
      setError((prevError) => ({
        ...prevError,
        password: "Please enter your password.",
      }));
      return;
    }

    handleLogin(formData.username, formData.password);
  };

  return (
    <>
      <Head>
        <title>The Interns</title>
        <meta name="description" content="Generated by The Interns" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <section className="bg-gray-50 dark:bg-gray-900 text-center">
        <div className="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
          <p
            className={clsx(
              Josefin.className,
              "flex-grow-0 flex-shrink-0 font-sans w-[573px] h-[227px] text-8xl text-center text-[#3193f5]"
            )}
          >
            <span className="flex-grow-0 flex-shrink-0 w-[573px] h-[227px] text-8xl text-center text-[#3193f5]">
              The
            </span>
            <br />
            <span className="flex-grow-0 flex-shrink-0 w-[573px] h-[227px] text-8xl text-center text-[#3193f5]">
              Interns
            </span>
          </p>
          <div className="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
            <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
              <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                Sign in to tDSP
              </h1>
              <form className="space-y-4 md:space-y-6" onSubmit={handleSubmit}>
                <div className="text-left">
                  <label
                    htmlFor="username"
                    className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                  >
                    Username
                  </label>
                  <input
                    onChange={(e) =>
                      setFormData({ ...formData, username: e.target.value })
                    }
                    type="username"
                    name="username"
                    id="username"
                    className="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-indigo-600 focus:border-indigo-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                    placeholder="Username"
                  />
                  {error.username && (
                    <p className="text-sm text-red-500">{error.username}</p>
                  )}
                </div>
                <div className="text-left">
                  <label
                    htmlFor="password"
                    className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                  >
                    Password
                  </label>
                  <input
                    onChange={(e) =>
                      setFormData({ ...formData, password: e.target.value })
                    }
                    type="password"
                    name="password"
                    id="password"
                    placeholder="Password"
                    className="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-indigo-600 focus:border-indigo-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  />
                  {error.password && (
                    <p className="text-sm text-red-500">{error.password}</p>
                  )}
                </div>
                <button
                  onClick={(e) => handleSubmit}
                  type="submit"
                  className="w-full text-white bg-[#3193f5] hover:bg-indigo-700 duration-100 focus:ring-4 focus:outline-none focus:ring-indigo-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-[#3193f5] dark:hover:bg-indigo-700 dark:focus:ring-indigo-800"
                >
                  Sign in
                </button>
                {loginError !== null && (
                  <p className="text-sm text-red-500">{loginError}</p>
                )}
              </form>
            </div>
          </div>
        </div>
      </section>
    </>
  );
}
